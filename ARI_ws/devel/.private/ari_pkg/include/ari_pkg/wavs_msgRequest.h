// Generated by gencpp from file ari_pkg/wavs_msgRequest.msg
// DO NOT EDIT!


#ifndef ARI_PKG_MESSAGE_WAVS_MSGREQUEST_H
#define ARI_PKG_MESSAGE_WAVS_MSGREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ari_pkg
{
template <class ContainerAllocator>
struct wavs_msgRequest_
{
  typedef wavs_msgRequest_<ContainerAllocator> Type;

  wavs_msgRequest_()
    : fileName()
    , text()  {
    }
  wavs_msgRequest_(const ContainerAllocator& _alloc)
    : fileName(_alloc)
    , text(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _fileName_type;
  _fileName_type fileName;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _text_type;
  _text_type text;





  typedef boost::shared_ptr< ::ari_pkg::wavs_msgRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ari_pkg::wavs_msgRequest_<ContainerAllocator> const> ConstPtr;

}; // struct wavs_msgRequest_

typedef ::ari_pkg::wavs_msgRequest_<std::allocator<void> > wavs_msgRequest;

typedef boost::shared_ptr< ::ari_pkg::wavs_msgRequest > wavs_msgRequestPtr;
typedef boost::shared_ptr< ::ari_pkg::wavs_msgRequest const> wavs_msgRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ari_pkg::wavs_msgRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ari_pkg::wavs_msgRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ari_pkg::wavs_msgRequest_<ContainerAllocator1> & lhs, const ::ari_pkg::wavs_msgRequest_<ContainerAllocator2> & rhs)
{
  return lhs.fileName == rhs.fileName &&
    lhs.text == rhs.text;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ari_pkg::wavs_msgRequest_<ContainerAllocator1> & lhs, const ::ari_pkg::wavs_msgRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ari_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ari_pkg::wavs_msgRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ari_pkg::wavs_msgRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ari_pkg::wavs_msgRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ari_pkg::wavs_msgRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ari_pkg::wavs_msgRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ari_pkg::wavs_msgRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ari_pkg::wavs_msgRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6d41350c8cd5607eba91f1184ee4a180";
  }

  static const char* value(const ::ari_pkg::wavs_msgRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6d41350c8cd5607eULL;
  static const uint64_t static_value2 = 0xba91f1184ee4a180ULL;
};

template<class ContainerAllocator>
struct DataType< ::ari_pkg::wavs_msgRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ari_pkg/wavs_msgRequest";
  }

  static const char* value(const ::ari_pkg::wavs_msgRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ari_pkg::wavs_msgRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string fileName\n"
"string text\n"
;
  }

  static const char* value(const ::ari_pkg::wavs_msgRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ari_pkg::wavs_msgRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.fileName);
      stream.next(m.text);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct wavs_msgRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ari_pkg::wavs_msgRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ari_pkg::wavs_msgRequest_<ContainerAllocator>& v)
  {
    s << indent << "fileName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.fileName);
    s << indent << "text: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.text);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARI_PKG_MESSAGE_WAVS_MSGREQUEST_H
